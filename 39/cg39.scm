; Brain-Flak implementation in Chicken Scheme for Code Guessing Round 39
; Supports line comments using `#`, ignores invalid characters
; Compilation & invocation: `csc cg39.scm && ./cg39 FILE [ARGS ...]`
(import (chicken process-context))
(define (parse port)
  (define (paren closing)
    (read-char port)
    (let ((sub (parse port)))
      (assert (eqv? (read-char port) closing))
      (cons
       (cons closing sub)
       (parse port))))
  (let ((c (peek-char port)))
    (case c
      ((#\) #\] #\} #\> #!eof) '())
      ((#\() (paren #\)))
      ((#\[) (paren #\]))
      ((#\{) (paren #\}))
      ((#\<) (paren #\>))
      (else
       (if (eqv? (read-char port) #\#)
           (do () ((memv (read-char port) '(#\newline #!eof)))))
       (parse port)))))
(define (exec exp active)
  (let ((inactive '()))
    (define (pop)
      (if (null? active) 0
        (let ((top (car active))) (set! active (cdr active)) top)))
    (define (push x)
      (set! active (cons x active)))
    (define (toggle)
      (let ((a active)) (set! active inactive) (set! inactive a)))
    (define (ctx-eval exp)
      (if (null? exp) 0
          (let ((sub (cdr exp)) (nilad (null? (cdr exp))))
            (if (list? (car exp))
                (apply + (map ctx-eval exp))
                (case (car exp)
                  ((#\)) (if nilad 1 (let ((k (ctx-eval sub))) (push k) k)))
                  ((#\]) (if nilad (length active) (- (ctx-eval sub))))
                  ((#\}) (if nilad (pop)
                       (do ((sum 0))
                           ((or (null? active) (= (car active) 0)) sum)
                         (set! sum (+ sum (ctx-eval sub))))))
                  ((#\>) (begin (if nilad (toggle) (ctx-eval sub)) 0)))))))
    (ctx-eval exp))
  (for-each (lambda (x) (display x) (newline)) active))
(let ((args (command-line-arguments)))
  (call-with-input-file (car args)
    (lambda (port)
      (let ((exp (parse port)))
        (assert (eof-object? (read-char port)))
        (exec exp (map string->number (reverse (cdr args))))))))
